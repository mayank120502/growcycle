<?php
 use Tygh\Addons\SdGoogleAnalytics\AddProductClickData; use Tygh\Addons\SdGoogleAnalytics\EventData; use Tygh\BlockManager\Block; use Tygh\Enum\Addons\SdGoogleAnalytics\Events; use Tygh\Enum\Addons\SdGoogleAnalytics\ProductActions; use Tygh\Enum\Addons\SdGoogleAnalytics\ProductIdentificationTypes; use Tygh\Enum\ProductOptionTypes; use Tygh\Enum\YesNo; use Tygh\Http; use Tygh\Models\Company; use Tygh\Registry; use Tygh\Settings; defined('BOOTSTRAP') or die('Access denied'); require_once __DIR__ . '/hooks.functions.php'; function fn_sd_ga_get_main_category($product_data, $lang_code = CART_LANGUAGE) { $main_category = ''; if (!empty($product_data)) { if (!empty($product_data['main_category'])) { $main_category = fn_get_category_name($product_data['main_category']); } else { $join = db_quote( 'RIGHT JOIN ?:products_categories AS pc ' . ' ON cd.category_id = pc.category_id AND pc.link_type = ?s' . ' AND pc.product_id = ?s', 'M', $product_data['product_id'] ); $condition = db_quote('cd.lang_code = ?s', $lang_code); $main_category = db_get_field( 'SELECT category ' . ' FROM ?:category_descriptions AS cd ?p ' . ' WHERE ?p', $join, $condition ); } } return addslashes($main_category); } function fn_sd_ga_get_brand($product_id, $product_data = [], $lang_code = CART_LANGUAGE) { static $brands = null; $feature_id = Registry::get('addons.sd_google_analytics.select_brand'); if (empty($feature_id) || empty($product_id)) { return ''; } $header_feature = $product_data['header_features'][$feature_id] ?? []; $product_feature = $product_data['product_features'][$feature_id] ?? []; if (!empty($header_feature['variant'])) { $brands[$product_id] = $header_feature['variant']; } elseif (!empty($product_feature['variant'])) { $brands[$product_id] = $product_feature['variant']; } elseif (empty($brands[$product_id])) { $join = db_quote( 'LEFT JOIN ?:product_feature_variant_descriptions' . ' AS pfvd ON pfvd.variant_id = pfv.variant_id AND pfvd.lang_code = ?s', $lang_code ); $condition = db_quote('pfv.feature_id = ?s AND pfv.product_id = ?i', $feature_id, $product_id); $brands[$product_id] = db_get_field( 'SELECT pfvd.variant FROM ?:product_features_values' . ' AS pfv ?p WHERE ?p', $join, $condition ); } return $brands[$product_id] ?? ''; } function fn_sd_ga_has_impression($product) { return !empty($product['sd_ga_position']); } function fn_sd_ga_get_list_name($block_data, $params, $controller, $mode) { $name = ''; if ($block_data) { if (!empty($block_data['type']) && $block_data['type'] == Block::TYPE_MAIN ) { $name = fn_sd_ga_list_name_for_main_block($params); } elseif (!empty($block_data['name'])) { $name = fn_sd_ga_get_lang_var('sd_ga_block_products', ['[block]' => $block_data['name']]); } } elseif (defined('AJAX_REQUEST')) { $name = fn_sd_ga_list_name_for_main_block($params); } $name .= fn_sd_ga_form_list_string($params, $block_data, $controller, $mode); return $name; } function fn_sd_ga_get_order_status_sign($order_status) { $sign = '-'; if (in_array($order_status, fn_get_order_paid_statuses())) { $sign = ''; } return $sign; } function fn_sd_ga_get_tracking_code($company_id = null) { if (!fn_allowed_for('ULTIMATE')) { $company_id = null; } return Settings::instance()->getValue('tracking_code', 'sd_google_analytics', $company_id); } function fn_sd_ga_change_status($status, $order_id) { if (!empty($status)) { db_query( 'UPDATE ?:orders SET sd_ga_status = ?s WHERE order_id = ?i', $status, $order_id ); } } function fn_sd_ga_refund($accounts, $order_info, $identification_type, $original_order = null, $is_ga4 = false) { list($refund_products, $ga4_items) = fn_sd_ga_get_transaction_refund($order_info['products'], $identification_type, $original_order); if (!empty($refund_products)) { $cache_buster = [ 'z' => mt_rand(1, 99999), ]; $required_data = [ 'v' => '1', 'ti' => $order_info['order_id'], 'cu' => Registry::get('currencies.' . CART_PRIMARY_CURRENCY . '.currency_code'), ]; if (empty($order_info['sd_ga_cid'])) { $required_data['cid'] = md5($order_info['email']); $required_data['ni'] = 1; } else { $required_data['cid'] = $order_info['sd_ga_cid']; } $event = [ 't' => 'event', 'ec' => 'Ecommerce', 'ea' => 'Refund', 'pa' => ProductActions::REFUND, 'ni' => 1, ]; $data = array_merge($event, $refund_products, $cache_buster); if ($is_ga4) { $json_params = [ 'client_id' => $required_data['cid'], 'events' => [ 'name' => 'refund', 'params' => [ 'currency' => $required_data['cu'], 'items' => $ga4_items, 'transaction_id' => $order_info['order_id'], ], ], ]; fn_sd_ga_ga4_post_request($json_params); } else { fn_sd_ga_request($accounts, $required_data, $data); } } } function fn_sd_ga_send($accounts, $order_info, $identification_type, $refuse = false, $refund = false) { $is_ga4 = fn_sd_ga_is_ga4(Registry::get('addons.sd_google_analytics.tracking_code')); if ($order_info) { $cache_buster = [ 'z' => mt_rand(1, 99999), ]; $required_data = [ 'v' => '1', 'ti' => $order_info['order_id'], 'cu' => Registry::get('currencies.' . CART_PRIMARY_CURRENCY . '.currency_code'), ]; if (empty($order_info['sd_ga_cid'])) { $required_data['cid'] = md5($order_info['email']); $required_data['ni'] = 1; } else { $required_data['cid'] = $order_info['sd_ga_cid']; } $company_name = fn_get_company_name($order_info['company_id']); $coupons = isset($order_info['coupons']) ? implode(', ', (array_keys($order_info['coupons']))) : ''; $sign = ($refuse) ? '-' : ''; if ($refund) { fn_sd_ga_refund($accounts, $order_info, $identification_type, null, $is_ga4); if ($is_ga4) { return; } } $event = [ 't' => 'event', 'ec' => 'Ecommerce', 'ea' => 'purchase', ]; $transaction = [ 'ta' => $company_name, 'tr' => $sign . $order_info['total'], 'ts' => $sign . $order_info['shipping_cost'], 'tt' => $sign . $order_info['tax_subtotal'], 'tcc' => $coupons, ]; $purchase = [ 'pa' => ProductActions::PURCHASE, ]; list($purchase_data, $ga4_items) = fn_sd_ga_get_transaction_purchase($order_info['products'], $identification_type, $required_data, $sign); $purchase = array_merge($purchase, $purchase_data); $promotions = empty($order_info['promotions']) ? [] : fn_sd_ga_get_transaction_promotions($order_info['promotions']); $data = array_merge($event, $transaction, $purchase, $promotions, $cache_buster); if ($is_ga4) { $json_params = [ 'client_id' => $required_data['cid'], 'events' => [ 'name' => 'purchase', 'params' => [ 'coupon' => $transaction['tcc'], 'currency' => $required_data['cu'], 'items' => $ga4_items, 'transaction_id' => $order_info['order_id'], 'shipping' => $transaction['ts'], 'tax' => $transaction['tt'], 'value' => $transaction['tr'], ], ], ]; fn_sd_ga_ga4_post_request($json_params); } else { fn_sd_ga_request($accounts, $required_data, $data); } } } function fn_sd_ga_get_transaction_promotions($data) { $key = 1; foreach ($data as $promo_id => $promotion) { $promotions["promo{$key}id"] = $promo_id; $promotions["promo{$key}nm"] = $promotion['ga_name']; $promotions["promo{$key}cr"] = $promotion['creative']; ++$key; } return $promotions; } function fn_sd_ga_get_transaction_purchase($data, $identification_type, $required_data, $sign) { $key = 1; foreach ($data as $product_key => $product_data) { $purchase["pr{$key}nm"] = $ga4_items[$key]['item_name'] = $product_data['product']; $purchase["pr{$key}pr"] = $ga4_items[$key]['price'] = $product_data['price']; $purchase["pr{$key}qt"] = $ga4_items[$key]['quantity'] = $sign . $product_data['amount']; $purchase["pr{$key}ca"] = $ga4_items[$key]['item_category'] = fn_sd_ga_get_main_category($product_data); $purchase["pr{$key}br"] = $ga4_items[$key]['item_brand'] = fn_sd_ga_get_brand($product_data['product_id']); $purchase["pr{$key}va"] = $ga4_items[$key]['item_variant'] = fn_sd_ga_get_product_options($product_data['product_id'], $data[$product_key]['extra']['product_options']); $purchase["pr{$key}id"] = $ga4_items[$key]['item_id'] = $product_data[$identification_type]; $ga4_items[$key]['currency'] = $required_data['cu']; ++$key; } $ga4_items = array_values($ga4_items); return [$purchase, $ga4_items]; } function fn_sd_ga_get_transaction_refund($data, $identification_type, $original_order = false) { $key = 1; if (empty($original_order)) { if (!empty($data)) { foreach ($data as $product_key => $product_data) { $refund_products["pr{$key}id"] = $ga4_items[$key]['item_id'] = $product_data[$identification_type]; $refund_products["pr{$key}qt"] = $ga4_items[$key]['quantity'] = $product_data['amount']; $refund_products["pr{$key}pr"] = $ga4_items[$key]['price'] = $product_data['price']; ++$key; } $ga4_items = array_values($ga4_items); } } else { foreach ($original_order as $product_key => $product_data) { if (isset($data['products'][$product_key])) { $amount_difference = $product_data['amount'] - $data['products'][$product_key]['amount']; if ($amount_difference > 0) { $refund_products["pr{$key}id"] = $ga4_items[$key]['item_id'] = $product_data[$identification_type]; $refund_products["pr{$key}qt"] = $ga4_items[$key]['quantity'] = $amount_difference; $refund_products["pr{$key}pr"] = $ga4_items[$key]['price'] = $product_data['price']; } } else { $refund_products["pr{$key}id"] = $ga4_items[$key]['item_id'] = $product_data[$identification_type]; $refund_products["pr{$key}qt"] = $ga4_items[$key]['quantity'] = $product_data['amount']; $refund_products["pr{$key}pr"] = $ga4_items[$key]['price'] = $product_data['price']; } $ga4_items = array_values($ga4_items); ++$key; } } return [$refund_products, $ga4_items]; } function fn_sd_ga_request($accounts, $required_data, $data) { foreach ($accounts as $account) { $required_data['tid'] = $account; Http::get(MEASUREMENT_GA_URL, array_merge($required_data, $data)); } } function fn_sd_ga_ga4_post_request($json_params) { if (!empty($json_params)) { $json_params_encoded = json_encode($json_params); $tracking_id = Registry::get('addons.sd_google_analytics.tracking_code'); $api_secret = Registry::get('addons.sd_google_analytics.api_secret'); Http::post(MEASUREMENT_GA4_URL . "?measurement_id={$tracking_id}&api_secret={$api_secret}", $json_params_encoded); } } function fn_sd_ga_get_cart_products($user_id) { $products = []; if (empty($user_id)) { if (fn_get_session_data('cu_id')) { $user_id = fn_get_session_data('cu_id'); } else { $user_id = fn_crc32(uniqid(TIME)); fn_set_session_data('cu_id', $user_id, COOKIE_ALIVE_TIME); } } $cart_products = fn_get_cart_products($user_id); if ($cart_products) { foreach ($cart_products as $product) { $products[$product['item_id']] = $product; } } return $products; } function fn_sd_ga_get_product_data($product_data, $count = 0) { $product_add = []; $identification_type = Registry::get('addons.sd_google_analytics.use_as_product_identification'); $is_ga4 = fn_sd_ga_is_ga4(Registry::get('addons.sd_google_analytics.tracking_code')); $sd_ga_params_name_ga4 = $is_ga4 ? 'item_' : ''; if (!empty($product_data['product_id'])) { if ($identification_type == ProductIdentificationTypes::PRODUCT_CODE) { $id = $product_data['extra']['product_code']; } else { $id = $product_data['product_id']; } $product_add = [ $sd_ga_params_name_ga4 . 'id' => $id, 'quantity' => empty($count) ? $product_data['amount'] : $count, 'price' => $product_data['price'], $sd_ga_params_name_ga4 . 'name' => $product_data['product'], $sd_ga_params_name_ga4 . 'brand' => fn_sd_ga_get_brand($product_data['product_id']), $sd_ga_params_name_ga4 . 'category' => fn_sd_ga_get_main_category($product_data), $sd_ga_params_name_ga4 . 'variant' => fn_sd_ga_get_product_options($product_data['product_id'], $product_data['extra']['product_options']), 'company_id' => $product_data['extra']['company_id'], ]; if (empty($product_data['product'])) { $product_data = fn_get_product_data($product_data['product_id'], Tygh::$app['session']['auth']); $product_add['price'] = $product_data['price']; $product_add[$sd_ga_params_name_ga4 . 'name'] = $product_data['product']; $product_add['company_id'] = $product_data['company_id']; } if (fn_allowed_for('MULTIVENDOR')) { $vendor_codes = fn_sd_ga_get_vendor_tracking_codes(); $product_add['tracker'] = $vendor_codes[$product_add['company_id']] ?? null; } } return $product_add; } function fn_sd_ga_get_product_options($product_id, $product_options = []) { $variants = []; if (!empty($product_id) && !empty($product_options)) { foreach ($product_options as $option_id => $variant_id) { $option = fn_get_product_option_data($option_id, $product_id); if (!empty($option['variants'])) { foreach ($option['variants'] as $id => $variant) { if ($option['option_type'] == ProductOptionTypes::CHECKBOX) { $variant = YesNo::YES; } if ($id == $variant_id) { $variants[] = $option['option_name'] . ': ' . $variant; } } } } } return ($variants) ? implode(', ', $variants) : ''; } function fn_sd_ga_check_cart_changes($added, $deleted) { if ((Registry::get('runtime.controller') == 'checkout' && Registry::get('runtime.mode') != 'add_profile' && Registry::get('runtime.mode') != 'customer_info') && Registry::get('runtime.controller') != 'auth' ) { $data = []; fn_sd_ga_change_cart($added, $deleted, $data); fn_sd_ga_change_cart($deleted, $added, $data, false); return $data; } } function fn_sd_ga_change_cart(&$first_item_list, &$second_item_list, &$data, $add = true) { if ($first_item_list) { if ($add) { $key_1 = 'added'; $key_2 = 'deleted'; } else { $key_1 = 'deleted'; $key_2 = 'added'; } foreach ($first_item_list as $id => $item) { if (isset($data[$key_1][$id])) { $data[$key_1][$id]['quantity'] += $item['quantity']; } else { $data[$key_1][$id] = $item; } if (isset($data[$key_2][$id])) { fn_sd_ga_check_cart_product($id, $data, $data[$key_2][$id], $item); } if (isset($second_item_list[$id])) { fn_sd_ga_check_cart_product($id, $data, $second_item_list, $item); } } } } function fn_sd_ga_check_cart_product($product_id, &$data, $added, $deleted) { if (empty($added)) { $data['deleted'][$product_id] = $deleted; } elseif (empty($deleted)) { $data['added'][$product_id] = $added; } elseif (isset($deleted['quantity']) && isset($added['quantity'])) { if ($deleted['quantity'] > $added['quantity']) { unset($data['added'][$product_id]); $data['deleted'][$product_id]['quantity'] = $deleted['quantity'] - $added['quantity']; } elseif ($deleted['quantity'] < $added['quantity']) { unset($data['deleted'][$product_id]); $data['added'][$product_id]['quantity'] = $added['quantity'] - $deleted['quantity']; } } else { unset($data['added'][$product_id], $data['deleted'][$product_id]); } } function fn_sd_ga_collect_data($event, $product_data, $category_name, $block_data, $params) { if ( AREA == 'C' && !empty($event) && !empty($product_data) ) { $event_data = new EventData(); $identification_type = Registry::get('addons.sd_google_analytics.use_as_product_identification'); if ($identification_type == ProductIdentificationTypes::PRODUCT_CODE) { $event_data->id = $product_data['product_code']; } else { $event_data->id = $product_data['product_id']; } $runtime = Registry::get('runtime'); $event_data->name = $product_data['product']; $event_data->brand = fn_sd_ga_get_brand($product_data['product_id'], $product_data); if (empty($category_name)) { $event_data->category = fn_sd_ga_get_main_category($product_data); } else { $event_data->category = $category_name; } $event_data->price = $product_data['price']; $event_data->company_id = $product_data['company_id']; $event_data->variant = fn_sd_ga_get_product_options($product_data['product_id'], $product_data['selected_options']); if ($event === Events::ADD_IMPRESSION) { $event_data->list_name = fn_sd_ga_get_list_name($block_data, $params, $runtime['controller'], $runtime['mode']); fn_sd_ga_save_to_array_data($event_data, 'ga_array_data', $event); } elseif ($event === Events::ADD_PRODUCT_CLICK) { $add_product_click_data = new AddProductClickData(); $url = fn_url('products.view?product_id=' . $product_data['product_id']); $add_product_click_data->product = array_filter((array) $event_data); $add_product_click_data->list_name = fn_sd_ga_get_list_name($block_data, $params, $runtime['controller'], $runtime['mode']); fn_sd_ga_save_to_array_data($add_product_click_data, 'ga_array_data', $event, false, $url); } else { fn_sd_ga_save_to_array_data($event_data, 'ga_array_data', $event); } } } function fn_sd_ga_get_array_data() { return (AREA == 'C') ? Registry::get('sd_ga.ga_array_data') : ''; } function fn_sd_ga_list_name_for_main_block($params) { static $list_name = null; $key = json_encode($params); $controller = Registry::get('runtime.controller'); $mode = Registry::get('runtime.mode'); if (!isset($list_name[$key])) { if ($controller == 'products' && $mode == 'search') { $list_name[$key] = fn_sd_ga_get_lang_var('search_results'); } elseif ($controller == 'categories' && $mode == 'view') { $list_name[$key] = fn_sd_ga_get_lang_var( 'sd_ga_category_products', ['[category]' => fn_get_category_name($params['category_id'])] ); } elseif ($controller == 'product_features' && $mode == 'view') { $variant_data = fn_get_product_feature_variant($params['variant_id']); if (!empty($variant_data['variant'])) { $list_name[$key] = fn_sd_ga_get_lang_var( 'sd_ga_brand_products', ['[brand]' => $variant_data['variant']] ); } } else { $list_name[$key] = ''; } } return $list_name[$key]; } function fn_sd_ga_save_array_catalog_promotions($product, $lang_code = CART_LANGUAGE) { if (AREA == 'C' && !empty($product['promotions'])) { $promotion_ids = array_keys($product['promotions']); if (!empty($promotion_ids)) { $promotions_name = db_get_hash_single_array( 'SELECT name, promotion_id ' . ' FROM ?:promotion_descriptions ' . ' WHERE promotion_id IN (?n) AND lang_code = ?s', ['promotion_id', 'name'], $promotion_ids, $lang_code ); } foreach ($promotion_ids as $id) { $ga_promotions_info[] = [ 'id' => $id, 'name' => (isset($promotions_name[$id])) ? fn_sd_ga_get_lang_var('catalog') . ': ' . $promotions_name[$id] : '', 'creative' => fn_sd_ga_get_lang_var('catalog'), 'position' => '', 'company_id' => $product['company_id'], ]; } fn_sd_ga_save_to_array_data($ga_promotions_info, 'ga_array_data', 'add_promo'); } } function fn_sd_ga_save_to_array_data($data, $array_name, $event, $registry_data = false, $snapping_id = 0) { if (is_object($data)) { $data = (array) $data; } if (AREA == 'C' && $data && $array_name) { if ($registry_data === false) { $registry_data = Registry::get('sd_ga.' . $array_name); } if ($event) { if ($snapping_id) { $registry_data[$event][$snapping_id] = $data; } else { $registry_data[$event][] = $data; } } else { $registry_data[] = $data; } Registry::set('sd_ga.' . $array_name, $registry_data); } } function fn_sd_ga_save_array_banners($banners_data, $snapping_id) { if ( AREA == 'C' && $banners_data && $snapping_id ) { foreach ($banners_data as $banner) { $ga_banners_info[] = [ 'id' => $banner['banner_id'], 'name' => (isset($banner['banner'])) ? fn_sd_ga_get_lang_var('banners') . ': ' . $banner['banner'] : '', 'creative' => fn_sd_ga_get_lang_var('banners'), 'position' => '', 'wysiwyg' => ($banner['type'] == 'T') ? YesNo::YES : '', ]; } fn_sd_ga_save_to_array_data( $ga_banners_info, 'ga_array_data', 'add_promo_banners', false, $snapping_id ); } } function fn_sd_ga_get_lang_var($var, $params = [], $lang_code = DEFAULT_LANGUAGE) { return ($var) ? __($var, $params, $lang_code) : ''; } function fn_sd_ga_get_coverage_user_id() { $result = [ 'validator_data' => (!empty(Tygh::$app['session']['auth']['user_id'])) ? md5(Tygh::$app['session']['auth']['user_id']) : '', 'ga_user_id_law' => Tygh::$app['session']['ga_user_id_law'], ]; return $result; } function fn_sd_ga_form_list_string($params, $block_data, $controller, $mode) { $dispatch = "{$controller}.{$mode}"; $has_modes = ($block_data['type'] == Block::TYPE_MAIN) || defined('AJAX_REQUEST'); $has_modes = $has_modes && in_array($dispatch, ['products.search', 'categories.view']); $view_str = $dispatch_str = ''; if ($has_modes) { $grid_layout = ''; if (!empty($params['layout'])) { $grid_layout = $params['layout']; } elseif ($dispatch == 'products.search') { $session_layout = Tygh::$app['session']['products_layout']; if (!empty($session_layout['search'])) { $grid_layout = $session_layout['search']; } } elseif (!empty($params['category_id'])) { $session_layout = Tygh::$app['session']['products_layout']; if (!empty($session_layout[$params['category_id']])) { $grid_layout = $session_layout[$params['category_id']]; } } $grid_layout = $grid_layout ?: Registry::get('settings.Appearance.default_products_view'); if (!empty($grid_layout)) { $grid_layout = explode('_', $grid_layout); $grid_layout = array_map('ucfirst', $grid_layout); $grid_layout = implode(' ', $grid_layout); $view_str = __('sd_ga_viewed_as', ['[view]' => $grid_layout]); } } $dispatch_str = __('sd_ga_at_dispatch', ['[dispatch]' => $dispatch]); if ($view_str) { $res = " $view_str $dispatch_str"; } else { $res = " $dispatch_str"; } return $res; } function fn_sd_ga_add_tracker_fields() { $addon_settings = Registry::get('addons.sd_google_analytics'); $fields = [ 'siteSpeedSampleRate' => $addon_settings['site_speed_sample_rate'] ?? 100, 'anonymizeIp' => ($addon_settings['ga_anonymize_ip'] == YesNo::YES), ]; fn_set_hook('sd_ga_add_tracker_fields', $fields); return json_encode($fields); } function fn_sd_ga_add_crossdomain_fields() { $addon_settings = Registry::get('addons.sd_google_analytics'); $linker = ''; if ( !empty($addon_settings['domain_id']) && $addon_settings['enable_cross_domain_tracking'] == YesNo::YES ) { $cross_domains = explode(',', $addon_settings['domain_id']); foreach ($cross_domains as &$cross_domain) { $cross_domain = trim($cross_domain); } $linker = implode(', ', $cross_domains); } return $linker; } function fn_sd_ga_order_statuses_schema($inventory) { $order_statuses = fn_get_statuses(STATUSES_ORDER, [], true, true); $schema = $result = []; $filtered_statuses = array_filter($order_statuses, function ($status) use ($inventory) { return $status['params']['inventory'] == $inventory && $status['status'] != STATUS_INCOMPLETED_ORDER; }); foreach ($filtered_statuses as $status) { $schema[$status['status']] = ['title' => $status['description']]; } foreach ($schema as $field_id => $field) { $result[$field_id] = $field['title']; } return $result; } function fn_sd_ga_is_ga4($tracking_id) { if (substr($tracking_id, 0, 2) === 'G-') { return true; } else { return false; } } function fn_sd_ga_get_vendor_tracking_codes() { $vendor_tracking_codes = []; if ( fn_allowed_for('MULTIVENDOR') && Registry::get('addons.vendor_plans.status') == 'A' ) { $query = 'SELECT c.company_id, c.sd_ga_tracking_code ' . 'FROM ?:companies as c ' . 'LEFT JOIN ?:vendor_plans as v ON c.plan_id = v.plan_id ' . 'WHERE v.ga_vendors_tracking = ?s'; $vendor_tracking_codes = db_get_hash_single_array($query, ['company_id', 'sd_ga_tracking_code'], YesNo::YES); } return $vendor_tracking_codes; } function fn_sd_ga_cache_vendor_tracking_codes() { $cache_tag = 'sd_ga_vendors'; $cache_key = 'vendor_tracking_codes'; $cache_tables = ['vendor_plans', 'companies']; Registry::registerCache( [$cache_tag, $cache_key], $cache_tables, Registry::cacheLevel('static') ); if (Registry::isExist($cache_key)) { return; } $vendor_tracking_codes = fn_sd_ga_get_vendor_tracking_codes(); Registry::set($cache_key, $vendor_tracking_codes); } function fn_sd_ga_get_vendor_tracking_codes_from_cache() { return (AREA == 'C') ? Registry::get('vendor_tracking_codes') : ''; } function fn_sd_ga_compare_products_amount(array $products_from_cart, array $products_from_session): bool { $cart_total_amount = $session_total_amount = 0; if (!empty($products_from_cart) && !empty($products_from_session)) { foreach ($products_from_cart as $product) { if (isset($product['amount'])) { $cart_total_amount += $product['amount']; } } foreach ($products_from_session as $product) { if (isset($product['amount'])) { $session_total_amount += $product['amount']; } } } return $cart_total_amount == $session_total_amount; } 