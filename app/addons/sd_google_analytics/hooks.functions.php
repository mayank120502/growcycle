<?php
use Tygh\BlockManager\Block; use Tygh\Enum\Addons\SdGoogleAnalytics\ProductIdentificationTypes; use Tygh\Enum\SiteArea; use Tygh\Enum\YesNo; use Tygh\Http; use Tygh\Models\Company; use Tygh\Models\VendorPlan; use Tygh\Registry; use Tygh\Tygh; defined('BOOTSTRAP') or die('Access denied'); function fn_sd_google_analytics_save_cart_content_pre($cart, $user_id, $type, $user_type) { if (AREA == 'C') { Tygh::$app['session']['sd_ga']['old'] = fn_sd_ga_get_cart_products($user_id); } } function fn_sd_google_analytics_save_cart_content_post($cart, $user_id, $type) { if (AREA != 'C') { return false; } $added = $deleted = []; $products = Tygh::$app['session']['sd_ga']['new'] ?? []; $products_from_session = fn_sd_ga_get_cart_products($user_id); $is_amount_correct = fn_sd_ga_compare_products_amount($products, $products_from_session); if ($is_amount_correct) { $products = fn_sd_ga_get_cart_products($user_id); $old_products = Tygh::$app['session']['sd_ga']['old'] ?? []; } else { $old_products = fn_sd_ga_get_cart_products($user_id); } $deleted_products = array_diff_key($old_products, $products); $identification_type = Registry::get('addons.sd_google_analytics.use_as_product_identification'); if ($deleted_products) { foreach ($deleted_products as $product) { $deleted[$product['product_id']] = fn_sd_ga_get_product_data($product); } } $added_products = array_diff_key($products, $old_products); foreach ($added_products as $product) { $added[$product['product_id']] = fn_sd_ga_get_product_data($product); } foreach ($products as $key => $product) { if (isset($old_products[$key])) { if ($product['amount'] > $old_products[$key]['amount']) { $added[$product['product_id']] = fn_sd_ga_get_product_data($product, $product['amount'] - $old_products[$key]['amount']); } elseif ($product['amount'] < $old_products[$key]['amount']) { $additional_data = fn_sd_ga_get_product_data($product); if ($identification_type == ProductIdentificationTypes::PRODUCT_CODE) { $id = $product['extra']['product_code']; } else { $id = $product['product_id']; } $deleted[$product['product_id']] = [ 'id' => $id, 'quantity' => $old_products[$key]['amount'] - $product['amount'], 'name' => $product['product'] ?? $additional_data['name'], 'variant' => $additional_data['variant'], 'price' => $product['price'] ?? $additional_data['price'], 'brand' => $additional_data['brand'], 'category' => $additional_data['category'], 'company_id' => $product['extra']['company_id'] ?? $additional_data['company_id'], ]; if (fn_allowed_for('MULTIVENDOR')) { $deleted[$product['product_id']]['tracker'] = $additional_data['tracker']; } } } } unset(Tygh::$app['session']['sd_ga']['old'], Tygh::$app['session']['sd_ga']['new']); $cart_changes = fn_sd_ga_check_cart_changes($added, $deleted); if ($cart_changes) { if (defined('AJAX_REQUEST')) { Tygh::$app['ajax']->assign('sd_ga', $cart_changes); } else { if (!empty($cart_changes['added'])) { Tygh::$app['session']['sd_ga']['added'] = $cart_changes['added']; } if (!empty($cart_changes['deleted'])) { Tygh::$app['session']['sd_ga']['deleted'] = $cart_changes['deleted']; } } } } function fn_sd_google_analytics_order_placement_routines() { if (AREA == 'C') { unset(Tygh::$app['session']['sd_ga']['added'], Tygh::$app['session']['sd_ga']['deleted']); } } function fn_sd_google_analytics_get_products_post(&$products, $params, $lang_code) { if (AREA == 'C' && $products) { $page = $params['page'] ?? 0; $per_page = $params['items_per_page'] ?? 0; $count = ($page - 1) * $per_page + 1; $category_ids = []; foreach ($products as $product) { if (!empty($product['main_category'])) { $category_ids[$product['product_id']] = $product['main_category']; } } if (!empty($category_ids)) { $categories = fn_get_category_name($category_ids); } foreach ($products as &$product) { $product['sd_ga_position'] = $count++; if (!empty($product['main_category'])) { $product['category_name'] = $categories[$product['main_category']]; } } } } function fn_sd_google_analytics_change_order_status($status_to, $status_from, $order_info) { static $original_order = null; $order_info_default = [ 'sd_ga_status' => '', 'company_id' => '', 'products' => [], 'order_id' => '', ]; $order_info = array_merge($order_info_default, $order_info); $ga_status = $order_info['sd_ga_status']; $addon_settings = Registry::get('addons.sd_google_analytics'); $identification_type = $addon_settings['use_as_product_identification']; $paid_statuses = $addon_settings['select_paid_statuses']; $refund_statuses = $addon_settings['select_refund_statuses']; $accounts = [ fn_sd_ga_get_tracking_code($order_info['company_id']), ]; if (fn_allowed_for('MULTIVENDOR') && Registry::get('addons.vendor_plans.status') === 'A') { $vendor_plans = VendorPlan::model()->findMany(); $vendor_id = $order_info['company_id']; $tracking_code = ((bool) $vendor_id) ? db_get_field('SELECT sd_ga_tracking_code FROM ?:companies WHERE company_id = ?i', $vendor_id) : ''; $company_data = Company::model()->find($order_info['company_id']); foreach ($vendor_plans as $plan) { if ($plan['plan_id'] == $company_data['plan_id'] && $plan['ga_vendors_tracking'] == YesNo::YES) { if (!empty($tracking_code)) { $accounts[] = $tracking_code; } } } } if ($status_to == STATUS_INCOMPLETED_ORDER) { foreach ($order_info['products'] as $product_key => $product_data) { $original_order[$product_key] = [ 'amount' => $product_data['amount'], $identification_type => $product_data[$identification_type], 'price' => $product_data['price'], ]; } } elseif (array_key_exists($status_to, $paid_statuses) && $status_from == STATUS_INCOMPLETED_ORDER && !empty($original_order)) { fn_sd_ga_refund($accounts, $order_info, $identification_type, $original_order); unset($original_order); } if (array_key_exists($status_to, $paid_statuses) && $ga_status == YesNo::NO) { fn_sd_ga_send($accounts, $order_info, $identification_type, false, false); fn_sd_ga_change_status(YesNo::YES, $order_info['order_id']); } elseif ( (array_key_exists($status_to, $refund_statuses) || $status_to == STATUS_INCOMPLETED_ORDER) && $ga_status == YesNo::YES ) { $refund = (array_key_exists($status_to, $refund_statuses)); fn_sd_ga_send($accounts, $order_info, $identification_type, true, $refund); fn_sd_ga_change_status(YesNo::NO, $order_info['order_id']); } } function fn_sd_google_analytics_get_order_items_info_post(&$order, $v, $k) { $order['lang_code'] = $order['lang_code'] ?? CART_LANGUAGE; $order['products'][$k]['ga_category_name'] = fn_sd_ga_get_main_category($v, $order['lang_code']); } function fn_sd_google_analytics_complete() { if (AREA == 'C' && defined('AJAX_REQUEST')) { $result = Registry::get('sd_ga.ga_array_data'); if (!empty($result)) { Tygh::$app['ajax']->assign('ga_array_data', $result); } } } function fn_sd_google_analytics_render_block_content_after($block_schema, $block, &$block_content) { $dispatch = Registry::get('runtime.controller') . '.' . Registry::get('runtime.mode'); if (AREA == 'C' && $block['type'] == 'banners' && $block['status'] == 'A') { $banners = Tygh::$app['view']->getTemplateVars('items'); if (!isset($block['properties']['navigation'])) { $banner_id = 'id="banner_original_' . $block['snapping_id'] . '"' . ' class="ty-banner'; $block_content = str_replace('class="ty-banner', $banner_id, $block_content); } fn_sd_ga_save_array_banners($banners, $block['snapping_id']); } elseif ( AREA == SiteArea::STOREFRONT && ($block['type'] == 'products' || ($block['type'] == Block::TYPE_MAIN && in_array($dispatch, ['products.search', 'categories.view', 'product_features.view']))) ) { $block_content = sprintf( '<input type="hidden" class="ga-block-marker-%s">%s%s', $block['type'], $block_content, Tygh::$app['view']->fetch('addons/sd_google_analytics/common/click_tracking.tpl') ); } } function fn_sd_google_analytics_get_order_info(&$order, $additional_data) { if (empty($order['promotions']) || !is_array($order['promotions'])) { return false; } $promotions_ids = array_keys($order['promotions']); $promotions_zone = []; if (!empty($promotions_ids)) { $promotions_zone = db_get_hash_single_array( 'SELECT promotion_id, zone ' . ' FROM ?:promotions ' . ' WHERE promotion_id IN (?n)', ['promotion_id', 'zone'], $promotions_ids ); } foreach ($promotions_zone as $promo_key => $zone) { $order['promotions'][$promo_key]['creative'] = fn_sd_ga_get_lang_var($zone); $order['promotions'][$promo_key]['ga_name'] = empty($order['promotions'][$promo_key]['name']) ? '' : "{$order['promotions'][$promo_key]['creative']}: {$order['promotions'][$promo_key]['name']}"; } } function fn_sd_google_analytics_post_add_to_cart($product_data, &$cart, $auth, $update, $ids) { $identification_type = Registry::get('addons.sd_google_analytics.use_as_product_identification'); if ( $identification_type == ProductIdentificationTypes::PRODUCT_CODE && AREA == 'C' ) { foreach ($ids as $cart_id => $id) { if (!empty($product_data[$id]['product_code'])) { $cart['products'][$cart_id]['product_code'] = $product_data[$id]['product_code']; } } } } function fn_sd_google_analytics_set_admin_notification($user_data) { $user_data_default = [ 'is_root' => '', 'company_id' => '', 'user_id' => '', ]; $user_data = array_merge($user_data_default, $user_data); if ( AREA == 'A' && $user_data['is_root'] == YesNo::YES) { if ( $user_data['company_id'] == 0 && version_compare(PRODUCT_VERSION, '4.11.0', '>') ) { $tracking_code = Registry::get('addons.sd_google_analytics.tracking_code'); if (empty($tracking_code)) { $tracking_code_notification = true; if (fn_allowed_for('ULTIMATE')) { $tracking_code_notification = false; $companies = db_get_fields('SELECT company_id FROM ?:companies'); foreach ($companies as $company_id) { if (empty(fn_sd_ga_get_tracking_code($company_id))) { $tracking_code_notification = true; break; } } } if ($tracking_code_notification) { Tygh::$app['event.dispatcher']->dispatch( 'sd_google_analytics.require_tracking_code', ['user_id' => $user_data['user_id']] ); } } if (Registry::get('settings.Logging.log_type_requests.http') != YesNo::YES) { Tygh::$app['event.dispatcher']->dispatch( 'sd_google_analytics.require_logs', ['user_id' => $user_data['user_id']] ); } } } } function fn_sd_google_analytics_create_order(&$order) { if (AREA == 'C') { $ga_cookie = fn_get_cookie('_ga'); if (!empty($ga_cookie)) { list(, , $cid1, $cid2) = explode('.', $ga_cookie, 4); $order['sd_ga_cid'] = "{$cid1}.{$cid2}"; } } } function fn_sd_google_analytics_admin_get_logs($params, &$condition, $join, $sorting) { if (isset($params['q_content']) && fn_string_not_empty($params['q_content'])) { $query_pieces = fn_explode(' ', $params['q_content']); $search_type = ' AND '; $search_conditions = []; foreach ($query_pieces as $piece) { if (strlen($piece) == 0) { continue; } $tmp = db_quote('(?:logs.content LIKE ?l)', '%' . $piece . '%'); $search_conditions[] = '(' . $tmp . ')'; } $_cond = implode($search_type, $search_conditions); if (!empty($search_conditions)) { $condition .= ' AND (' . $_cond . ') '; } } } function fn_sd_google_analytics_delete_cart_product($cart, $cart_id, $full_erase) { if (!defined('AJAX_REQUEST')) { $is_ga4 = fn_sd_ga_is_ga4(Registry::get('addons.sd_google_analytics.tracking_code')); $accounts[] = Registry::get('addons.sd_google_analytics.tracking_code'); $product_data = []; $cache_buster = [ 'z' => rand(1, 99999), ]; $required_data = [ 'v' => '1', 'cu' => Registry::get('currencies.' . CART_PRIMARY_CURRENCY . '.currency_code'), ]; $ga_cookie = fn_get_cookie('_ga'); if (!empty($ga_cookie)) { list(, , $cid1, $cid2) = explode('.', $ga_cookie, 4); $required_data['cid'] = $cid1 . '.' . $cid2; } else { $required_data['cid'] = md5(Tygh::$app['session']->getID()); } $product_id = $cart['products'][$cart_id]['product_id']; if (fn_allowed_for('MULTIVENDOR')) { $vendor_codes = fn_sd_ga_get_vendor_tracking_codes(); $company_id = $cart['products'][$cart_id]['company_id']; $accounts[] = $vendor_codes[$company_id] ?? null; } $product_data = [ 'id' => $product_id, 'name' => $cart['products'][$cart_id]['product'], 'brand' => fn_sd_ga_get_brand($product_id), 'category' => fn_sd_ga_get_main_category($cart['products'][$cart_id]), 'price' => $cart['products'][$cart_id]['price'], 'quantity' => $cart['products'][$cart_id]['amount'], ]; $event = [ 't' => 'event', 'ec' => 'ecommerce', 'ea' => 'remove_from_cart', 'pa' => 'remove', 'ni' => 1, ]; if ($is_ga4) { $json_params = [ 'client_id' => $required_data['cid'], 'events' => [ 'name' => 'remove_from_cart', 'params' => [ 'currency' => $required_data['cu'], 'items' => [[ 'item_name' => $product_data['name'], 'price' => $product_data['price'], 'quantity' => $product_data['quantity'], 'item_category' => $product_data['category'], 'item_brand' => $product_data['brand'], 'item_id' => $product_data['id'], 'currency' => $required_data['cu'], ]], 'value' => $product_data['price'], ], ], ]; fn_sd_ga_ga4_post_request($json_params); } else { foreach ($accounts as $account) { $required_data['tid'] = $account; Http::get(MEASUREMENT_GA_URL, fn_array_merge($required_data, $event, $product_data, $cache_buster)); } } } } function fn_sd_google_analytics_clear_cart($cart, $complete, $clear_all) { if (AREA == 'C' && !empty($cart['products'])) { $company_id = Registry::get('runtime.company_id'); $product_data = []; $cache_buster = [ 'z' => mt_rand(1, 99999), ]; $required_data = [ 'v' => '1', 'cu' => Registry::get('currencies.' . CART_PRIMARY_CURRENCY . '.currency_code'), ]; $required_data['tid'] = fn_sd_ga_get_tracking_code($company_id); $ga_cookie = fn_get_cookie('_ga'); $event = [ 't' => 'event', 'ec' => 'ecommerce', 'ea' => 'remove_from_cart', 'pa' => 'remove', 'ni' => 1, ]; if (!empty($ga_cookie)) { list(, , $cid1, $cid2) = explode('.', $ga_cookie, 4); $required_data['cid'] = $cid1 . '.' . $cid2; } else { $required_data['cid'] = md5(Tygh::$app['session']->getID()); } foreach ($cart['products'] as $product) { $product_data = [ 'id' => $product['product_id'], 'name' => $product['product'], 'brand' => fn_sd_ga_get_brand($product['product_id']), 'category' => fn_sd_ga_get_main_category($product), 'price' => $product['price'], 'quantity' => $product['amount'], ]; Http::get(MEASUREMENT_GA_URL, fn_array_merge($required_data, $event, $product_data, $cache_buster)); } } } 