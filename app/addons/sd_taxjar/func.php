<?php
 use Tygh\Registry; use Tygh\Settings; use Tygh\Http; use Tygh\Addons\SchemesManager; defined('BOOTSTRAP') or die('Access denied'); function fn_sd_taxjar_cleaning_product(&$product) { $product['taxes'] = $product['tax_ids'] = array(); $product['included_tax'] = false; if (isset($product['clean_price'])) { unset($product['clean_price']); } if (isset($product['taxed_price'])) { unset($product['taxed_price']); } } function fn_sd_taxjar_get_api_key($vendor_id = 0) { return !empty($vendor_id) ? db_get_field('SELECT taxjar_key FROM ?:companies WHERE company_id = ?i', $vendor_id) : ''; } function fn_sd_taxjar_client_init($api_key = '') { require Registry::get('config.dir.addons') . 'sd_taxjar/lib/vendor/autoload.php'; $api_key = !empty($api_key) ? $api_key : Registry::get('settings.sd_taxjar.general.api_key'); try { $client = TaxJar\Client::withApiKey($api_key); } catch (TaxJar\Exception $e) { if (AREA != 'C') { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } } return !empty($client) ? $client : false; } function fn_sd_taxjar_get_customer_data($post_data) { $auth = Tygh::$app['session']['auth']; $auth_data = !empty($post_data['auth']) ? $post_data['auth'] : array(); $user_info = array(); if (!empty($post_data['auth']['user_id'])) { $user_info = fn_get_user_info($post_data['auth']['user_id']); } $res = fn_sd_taxjar_get_convert_data(fn_array_merge($user_info, $auth, $auth_data)); fn_sd_taxjar_unset_data($res, array('rule' => '/from_/')); return (!empty($res['to_state']) && !empty($res['to_country']) && !empty($res['to_zip'])) ? $res : array(); } function fn_sd_taxjar_get_vendor_data($post_data) { if (!empty($post_data['product']['company_id'])) { if (fn_allowed_for('ULTIMATE')) { $settings = Settings::instance($post_data['product']['company_id'])->getValues(); $company_data = $settings['Company']; } else { $company_data = fn_get_company_data($post_data['product']['company_id']); } $res = fn_sd_taxjar_get_convert_data($company_data); fn_sd_taxjar_unset_data($res, array('rule' => '/to_/')); } return (!empty($res['from_state']) && !empty($res['from_country']) && !empty($res['from_zip'])) ? $res : array(); } function fn_sd_taxjar_get_products_data($post_data) { if (empty($post_data['product']['price'])) { return array('amount' => 0); } $prepared_data = array( 'amount' => $post_data['product']['price'] ); if (empty($post_data['product']['product_tax_code']) && !empty($post_data['product']['product_id'])) { $product_tax_code = fn_sd_taxjar_get_products_tax_codes_for_products( array('product_id' => $post_data['product']['product_id']) ); } elseif (!empty($post_data['product']['product_tax_code'])) { $product_tax_code = $post_data['product']['product_tax_code']; } elseif (!empty($post_data['product']['product_collect'])) { $pids = array(); foreach ($post_data['product']['product_collect'] as $product_data) { $pids[] = $product_data['product_id']; } $product_tax_codes = fn_sd_taxjar_get_products_tax_codes_for_products( array('product_ids' => $pids) ); foreach ($post_data['product']['product_collect'] as $hash => $product_data) { if (!empty($product_tax_codes[$product_data['product_id']])) { $prepared_data['line_items'][] = array( 'quantity' => $post_data['product']['product_collect'][$hash]['amount'], 'unit_price' => $post_data['product']['product_collect'][$hash]['price'], 'product_tax_code' => $product_tax_codes[$product_data['product_id']] ); } else { $prepared_data['line_items'][] = array( 'quantity' => $post_data['product']['product_collect'][$hash]['amount'], 'unit_price' => $post_data['product']['product_collect'][$hash]['price'], ); } } } if (!empty($product_tax_code)) { $prepared_data['line_items'][] = array( 'quantity' => 1, 'unit_price' => $post_data['product']['price'], 'product_tax_code' => $product_tax_code ); } return $prepared_data; } function fn_sd_taxjar_get_shipping_data($post_data) { if (empty($post_data['shipping'])) { return array('shipping' => 0); } $res['shipping'] = $post_data['shipping']; return $res; } function fn_sd_taxjar_get_prepared_data($post_data) { if (!empty($post_data)) { $customer_data = fn_sd_taxjar_get_customer_data($post_data); $vendor_data = fn_sd_taxjar_get_vendor_data($post_data); $products_data = fn_sd_taxjar_get_products_data($post_data); $shipping_data = fn_sd_taxjar_get_shipping_data($post_data); if (!empty($customer_data) && !empty($vendor_data) && !empty($products_data) && !empty($shipping_data) ) { $data = fn_array_merge($customer_data, $vendor_data, $products_data, $shipping_data); } } return !empty($data) ? $data : array(); } function fn_sd_taxjar_tax_for_order($post_data) { if (empty($post_data)) { return array(); } $days = Registry::get('addons.sd_taxjar.amount_of_days'); $data = fn_sd_taxjar_get_prepared_data($post_data); if (!empty($data)) { $cache_key = 'sd_taxjar_product_key_' . md5(serialize($data)); Registry::registerCache($cache_key, $days * SECONDS_IN_DAY, Registry::cacheLevel('time'), true); $taxes = Registry::get($cache_key); if (empty($taxes)) { $client = fn_sd_taxjar_client_init(fn_sd_taxjar_get_api_key($post_data['product']['company_id'])); if (!empty($client)) { try { $response = $client->taxForOrder($data); $taxes = array( 'rate_value' => ($response->amount_to_collect > 0) ? $response->rate * 100 : 0, 'tax_subtotal' => $response->amount_to_collect, 'rate_type' => 'P', 'description' => __('addons.sd_taxjar.taxjar'), 'price_includes_tax' => 'N' ); if (!empty($response->breakdown->shipping)) { $taxes['breakdown']['shipping'] = array( 'rate_value' => !empty($response->breakdown->shipping->combined_tax_rate) ? $response->breakdown->shipping->combined_tax_rate : 0, 'tax_subtotal' => !empty($response->breakdown->shipping->tax_collectable) ? $response->breakdown->shipping->tax_collectable : 0, ); } if (!empty($response->breakdown->line_items)) { $tax_subtotal = $taxable_amount = 0; foreach ($response->breakdown->line_items as $line_item) { $tax_subtotal += $line_item->tax_collectable; $taxable_amount += $line_item->taxable_amount; } if ($tax_subtotal > 0 && $taxable_amount > 0) { $taxes['breakdown']['line_items'] = array( 'rate_value' => round($tax_subtotal / $taxable_amount, 2), 'tax_subtotal' => $tax_subtotal, ); } } Registry::set($cache_key, $taxes); } catch (TaxJar\Exception $e) { $taxes = fn_sd_taxjar_get_default_rate(); if (AREA != 'C') { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } } } } } return !empty($taxes) ? $taxes : array(); } function fn_sd_taxjar_get_default_rate() { return array( 'rate_value' => 0, 'tax_subtotal' => 0, 'rate_type' => 'P', 'description' => __('addons.sd_taxjar.taxjar'), 'price_includes_tax' => 'N' ); } function fn_sd_taxjar_calculate_taxes_post($cart, $group_products, &$shipping_rates, $auth, &$calculated_data) { $res = array(); fn_sd_taxjar_cleaning_shippings($shipping_rates); if (!empty($cart['user_data']) && !empty($group_products) && Registry::get('settings.General.tax_calculation') == 'subtotal' ) { $first_product = reset($group_products); $vendor_data = fn_sd_taxjar_get_vendor_data(array('product' => $first_product)); $customer_data = fn_sd_taxjar_get_customer_data(array('auth' => $cart['user_data'])); if (!empty($vendor_data) && !empty($customer_data)) { $res = fn_sd_taxjar_calculate_taxes($cart, $group_products, $shipping_rates, $auth); } } $calculated_data = $res; } function fn_sd_taxjar_cleaning_shippings(&$shipping_rates) { $unset_keys = array('taxed_price', 'taxes', 'inc_tax'); foreach ($shipping_rates as $shipping_key => $shipping) { foreach ($unset_keys as $key) { if (isset($shipping[$key])) { unset($shipping_rates[$shipping_key][$key]); } $shipping_rates[$shipping_key]['taxed_price'] = 0; } } } function fn_sd_taxjar_calculate_taxes($cart, $group_products, &$shipping_rates, $auth) { $total_product_cost = $total_shipping_cost = $company_id = $shipping_rate = 0; $applies['P'] = $applies['S'] = $res = array(); if (!empty($cart['subtotal_discount']) && $cart['subtotal_discount'] > 0) { fn_sd_taxjar_apply_order_discount($group_products, $cart['subtotal_discount']); } $group_key = fn_sd_taxjar_get_group_key($cart, $group_products); if (!empty($cart['chosen_shipping'][$group_key])) { $shipping_id = $cart['chosen_shipping'][$group_key]; $chosen_shipping = $shipping_rates[$shipping_id]; $total_shipping_cost = $chosen_shipping['rate']; $applies['S'][$group_key][$shipping_id] = true; } $product_collect = array(); foreach ($group_products as $hash => $product) { $company_id = $product['company_id']; $applies['P'][$hash] = true; $total_product_cost += $product['price'] * $product['amount']; $product_collect[$hash]['price'] = $product['price']; $product_collect[$hash]['amount'] = $product['amount']; $product_collect[$hash]['product_id'] = $product['product_id']; } if (fn_allowed_for('ULTIMATE')) { $company_id = fn_get_runtime_company_id(); } else { $company_id = $product['company_id']; } $taxjar_put_data = array( 'auth' => $cart['user_data'], 'product' => array( 'price' => $total_product_cost, 'company_id' => $company_id, 'product_collect' => $product_collect ), 'shipping' => $total_shipping_cost ); $rate = fn_sd_taxjar_tax_for_order($taxjar_put_data); if ($rate['tax_subtotal'] == 0) { $applies['S'] = $applies['P'] = array(); } if (!empty($rate['breakdown']['shipping'])) { $shipping_rate = !empty($rate['breakdown']['shipping']['tax_subtotal']) ? $rate['breakdown']['shipping']['tax_subtotal'] : 0; } $res['taxjar_' . $company_id] = array( 'rate_type' => 'P', 'rate_value' => $rate['rate_value'], 'price_includes_tax' => 'N', 'priority' => 0, 'tax_subtotal' => $rate['tax_subtotal'], 'description' => __('addons.sd_taxjar.sales_tax'), 'applies' => array( 'P' => $rate['tax_subtotal'] - $shipping_rate, 'S' => $shipping_rate, 'items' => $applies ) ); return $res; } function fn_sd_taxjar_get_group_key($cart, $group_products) { $key = key($group_products); foreach ($cart['product_groups'] as $_key => $product_group) { if (!empty($product_group['products'][$key])) { $res = $_key; break; } } return !empty($res) ? $res : 0; } function fn_sd_taxjar_get_products_tax_codes($client) { try { $categories = $client->categories(); } catch (TaxJar\Exception $e) { if (AREA != 'C') { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } } return !empty($categories) ? $categories : array(); } function fn_sd_taxjar_get_saved_products_tax_codes() { return db_get_array('SELECT * FROM ?:sd_taxjar_product_tax_code'); } function fn_sd_taxjar_get_products_tax_codes_for_products($params) { $tax_codes = array(); if (!empty($params['product_id'])) { $tax_codes = db_get_field( 'SELECT product_tax_code' . ' FROM ?:products' . ' WHERE product_id = ?i', $params['product_id'] ); } elseif (!empty($params['product_ids'])) { $tax_codes = db_get_hash_single_array( 'SELECT product_tax_code, product_id' . ' FROM ?:products' . ' WHERE product_id IN (?n)', array('product_id', 'product_tax_code'), $params['product_ids'] ); } return $tax_codes; } function fn_sd_taxjar_update_products_tax_codes($codes) { if (!empty($codes)) { $values = $langvars = array(); foreach ($codes as $code) { $values[] = db_quote('(?s, ?s, ?s)', $code->name, $code->product_tax_code, $code->description); $langvars[] = db_quote( '(?s, ?s, ?s)', CART_LANGUAGE, 'addons.sd_taxjar.' . $code->product_tax_code, $code->name ); } db_query( 'REPLACE INTO ?:sd_taxjar_product_tax_code (name, product_tax_code, description) VALUES ?p', implode(',', $values) ); db_query( 'REPLACE INTO ?:language_values (lang_code, name, value) VALUES ?p', implode(',', $langvars) ); } } function fn_sd_taxjar_get_convert_data($data) { $res = array(); $schema = array( 'from_street' => array('from_street', 'street', 'company_address'), 'to_street' => array('to_street', 'street', 's_address', 'b_address'), 'to_state' => array('to_state', 'state', 's_state', 'b_state'), 'from_state' => array('from_state', 'state', 'company_state'), 'to_country' => array('to_country', 'country', 's_country', 'b_country'), 'from_country' => array('from_country', 'country', 'company_country'), 'to_zip' => array('to_zip', 'zip', 'to_zipcode', 'zipcode', 's_zipcode', 'b_zipcode'), 'from_zip' => array('from_zip', 'zip', 'from_zipcode', 'zipcode', 'company_zipcode') ); foreach ($schema as $field_name => $variants) { foreach ($variants as $variant) { if (!empty($data[$variant])) { $res[$field_name] = $data[$variant]; break; } } } return $res; } function fn_sd_taxjar_unset_data(&$data = array(), $unset = array()) { if (!empty($data)) { if (!empty($unset['rule'])) { foreach ($data as $key => $value) { if (preg_match($unset['rule'], $key)) { unset($data[$key]); } } } if (!empty($unset['items'])) { foreach ($unset['items'] as $key) { if (isset($data[$key])) { unset($data[$key]); } } } } } function fn_sd_taxjar_get_full_convert_data($data) { $res = fn_sd_taxjar_get_convert_data($data); $countries = fn_get_simple_countries(true, CART_LANGUAGE); $states = fn_get_all_states(); if (!empty($res['to_country']) && !empty($countries[$res['to_country']])) { $res['to_country_name'] = $countries[$res['to_country']]; $res['to_state_name'] = $res['to_state']; if (!empty($res['to_state'])) { foreach ($states[$res['to_country']] as $state) { if ($state['code'] == $res['to_state']) { $res['to_state_name'] = $state['state']; break; } } } } if (!empty($res['from_country']) && !empty($countries[$res['from_country']])) { $res['from_country_name'] = $countries[$res['from_country']]; $res['from_state_name'] = $res['from_state']; if (!empty($res['from_state'])) { foreach ($states[$res['from_country']] as $state) { if ($state['code'] == $res['from_state']) { $res['from_state_name'] = $state['state']; break; } } } } return $res; } function fn_sd_taxjar_update_company_pre(&$company_data, $company_id, $lang_code, $can_update) { if (isset($company_data['taxjar_export_statuses'])) { $company_data['taxjar_export_statuses'] = !empty($company_data['taxjar_export_statuses']) ? json_encode($company_data['taxjar_export_statuses']) : ''; } if (isset($company_data['taxjar_export_csv_data'])) { $company_data['taxjar_export_csv_data'] = !empty($company_data['taxjar_export_csv_data']) ? json_encode($company_data['taxjar_export_csv_data']) : ''; } } function fn_sd_taxjar_get_company_data_post($company_id, $lang_code, $extra, &$company_data) { if (isset($company_data['taxjar_export_statuses'])) { $company_data['taxjar_export_statuses'] = !empty($company_data['taxjar_export_statuses']) ? json_decode($company_data['taxjar_export_statuses'], true) : array(); } if (isset($company_data['taxjar_export_csv_data'])) { $company_data['taxjar_export_csv_data'] = !empty($company_data['taxjar_export_csv_data']) ? json_decode($company_data['taxjar_export_csv_data'], true) : array(); } } function fn_sd_taxjar_change_order_status( $status_to, $status_from, $order_info, $force_notification, $order_statuses, $place_order ) { $company_id = !empty($order_info['company_id']) ? $order_info['company_id'] : fn_get_runtime_company_id(); if (fn_sd_taxjar_check_order($status_to, $company_id)) { $subtotal = 0; $client = fn_sd_taxjar_client_init(fn_sd_taxjar_get_api_key($company_id)); if (!empty($client)) { if (!empty($order_info['subtotal_discount']) && $order_info['subtotal_discount'] > 0) { fn_sd_taxjar_apply_order_discount($order_info['products'], $order_info['subtotal_discount']); } $transaction_date = !empty($cart['order_timestamp']) ? $cart['order_timestamp'] : TIME; $user_data = fn_sd_taxjar_get_convert_data($order_info); fn_sd_taxjar_unset_data($user_data, array('rule' => '/from_/')); $company_data['product']['company_id'] = $company_id; $vendor_data = fn_sd_taxjar_get_vendor_data($company_data); $products['line_items'] = array(); if (!empty($order_info['products'])) { foreach ($order_info['products'] as $cart_id => $product) { $price = !empty($product['base_price']) ? $product['base_price'] : $product['price']; $discount = fn_format_price(($price - $product['price']) * $product['amount']); $products_tax_code = fn_sd_taxjar_get_products_tax_codes_for_products( array('product_id' => $product['product_id']) ); $products['line_items'][] = array( 'quantity' => $product['amount'], 'product_identifier' => $product['product_id'], 'description' => $product['product'], 'unit_price' => $price, 'discount' => $discount, 'product_tax_code' => !empty($products_tax_code) ? $products_tax_code : '', ); $subtotal += $product['price'] * $product['amount']; } } $subtotal = (!empty($subtotal) && $subtotal > 0) ? $subtotal : $order_info['subtotal']; $put_data = array( 'transaction_id' => $order_info['order_id'], 'transaction_date' => date('Y-m-d', $transaction_date), 'amount' => $order_info['shipping_cost'] + $subtotal, 'shipping' => $order_info['shipping_cost'], 'sales_tax' => $order_info['tax_subtotal'], ); $put_data = fn_array_merge($put_data, $user_data, $vendor_data, $products); if ($place_order) { try { $response = $client->createOrder($put_data); $url = 'POST https://api.taxjar.com/v2/transactions/orders'; fn_log_event('requests', '', array( 'url' => $url, 'data' => print_r($put_data, true), 'response' => print_r(json_decode(json_encode($response), true), true), )); } catch (TaxJar\Exception $e) { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } } else { $update = false; try { $order = $client->showOrder($order_info['order_id']); $update = true; fn_log_event('requests', '', array( 'url' => 'GET https://api.taxjar.com/v2/transactions/orders/:transaction_id', 'data' => 'order_id: ' . $order_info['order_id'], 'response' => print_r(json_decode(json_encode($order), true), true), )); } catch (TaxJar\Exception $e) {} try { if ($update) { $response = $client->updateOrder($put_data); $url = 'PUT https://api.taxjar.com/v2/transactions/orders/:transaction_id'; } else { $response = $client->createOrder($put_data); $url = 'POST https://api.taxjar.com/v2/transactions/orders'; } fn_log_event('requests', '', array( 'url' => $url, 'data' => print_r($put_data, true), 'response' => print_r(json_decode(json_encode($response), true), true), )); } catch (TaxJar\Exception $e) { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } } } } elseif (!$place_order && fn_sd_taxjar_check_order($status_from, $company_id)) { fn_sd_taxjar_delete_order($order_info['order_id']); } } function fn_sd_taxjar_check_order($status, $company_id = 0) { $company_data = fn_get_company_data($company_id); return !empty($company_data['taxjar_export_statuses']) && !empty($status) && in_array($status, $company_data['taxjar_export_statuses']); } function fn_sd_taxjar_delete_order($order_id) { if (!empty($order_id)) { $company_id = db_get_field('SELECT company_id FROM ?:orders WHERE order_id = ?i', $order_id); $client = fn_sd_taxjar_client_init(fn_sd_taxjar_get_api_key($company_id)); if (!empty($client)) { try { $response = $client->deleteOrder($order_id); } catch (TaxJar\Exception $e) { $response = $e->getMessage(); fn_set_notification('E', __('error'), $response); } fn_log_event('requests', '', array( 'url' => 'DELETE https://api.taxjar.com/v2/transactions/orders/:transaction_id', 'data' => 'order_id: ' . $order_id, 'response' => print_r(json_decode(json_encode($response), true), true), )); } } } function fn_sd_taxjar_apply_order_discount(&$group_products, $subtotal_discount) { if (!empty($group_products) && !empty($subtotal_discount) && $subtotal_discount > 0) { $products = array(); $balance = $subtotal_discount; $total_product_cost = $parts = 0; foreach ($group_products as $hash => $product) { $total_product_cost += $product['price'] * $product['amount']; $parts += $product['amount']; for ($i = 1; $i <= $product['amount']; $i++) { $products[] = array( 'price' => $product['price'], 'product_id' => $product['product_id'], 'hash' => $hash, 'amount' => $product['amount'] ); } } $products = fn_sort_array_by_key($products, 'amount', SORT_DESC); if ($total_product_cost > 0) { $i = 1; foreach ($products as $key => $product) { if ($i == $parts) { $products[$key]['part_discount'] = fn_format_price($balance); } else { $purcent = $product['price'] / $total_product_cost; $products[$key]['part_discount'] = fn_format_price($subtotal_discount * $purcent); $balance -= $products[$key]['part_discount']; $i++; } } } $product_discounts = array(); foreach ($products as $product) { if (empty($product_discounts[$product['hash']])) { $product_discounts[$product['hash']] = $product['part_discount']; } } foreach ($group_products as $hash => $product) { if (!empty($product_discounts[$hash])) { $group_products[$hash]['price'] = $product['price'] - $product_discounts[$hash]; } } } } include_once(Registry::get('config.dir.schemas') . 'exim/orders.functions.php'); function fn_sd_taxjar_get_orders($params, &$fields, $sortings, &$condition, &$join, $group) { if (!empty($params['taxjar_export'])) { $fields['customer_name'] = "CONCAT(?:orders.firstname, ' ', ?:orders.lastname) AS customer_name"; $fields['shiptocity'] = '?:orders.s_city AS shiptocity'; $fields['shiptozip'] = '?:orders.s_zipcode AS shiptozip'; $fields['shiptostreet'] = '?:orders.s_address AS shiptostreet'; $fields['shiptocountrycode'] = '?:orders.s_country AS shiptocountrycode'; $fields['shipping_amount'] = '?:orders.shipping_cost AS shipping_amount'; $fields['discount_amount'] = '?:orders.discount AS discount_amount'; $fields['shiptostate'] = '?:orders.s_state AS shiptostate'; } } function fn_sd_taxjar_order_export_prepare_data($order) { if (!empty($order['order_id']) && !empty($order['company_id'])) { $taxes = fn_exim_orders_get_data($order['order_id'], 'T'); $sales_tax = 0; if (!empty($taxes)) { $_taxes = json_decode($taxes, true); foreach ($_taxes as $tax) { $sales_tax += $tax['tax_subtotal']; } } $company_id_data['product']['company_id'] = $order['company_id']; $company_data = fn_sd_taxjar_get_vendor_data($company_id_data); $res = array( 'provider' => SD_TAXJAR_ORDER_EXPORT_PROVIDER, 'order_id' => $order['order_id'], 'transaction_type' => SD_TAXJAR_ORDER_EXPORT_TYPE_ORDER, 'completed_at' => date('Y-m-d', $order['timestamp']), 'customer_name' => !empty($order['customer_name']) ? $order['customer_name'] : '', 'shiptocity' => !empty($order['shiptocity']) ? $order['shiptocity'] : '', 'shiptostate' => !empty($order['shiptostate']) ? $order['shiptostate'] : '', 'shiptozip' => !empty($order['shiptozip']) ? $order['shiptozip'] : '', 'shiptostreet' => !empty($order['shiptostreet']) ? $order['shiptostreet'] : '', 'shiptocountrycode' => !empty($order['shiptocountrycode']) ? $order['shiptocountrycode'] : '', 'shipping_amount' => !empty($order['shipping_amount']) ? $order['shipping_amount'] : 0, 'handling_amount' => !empty($order['handling_amount']) ? $order['handling_amount'] : 0, 'discount_amount' => !empty($order['discount_amount']) ? $order['discount_amount'] : 0, 'total_sale' => !empty($order['total']) ? ($order['total'] - $sales_tax) : 0, 'sales_tax' => $sales_tax, 'from_country' => !empty($company_data['from_country']) ? $company_data['from_country'] : '', 'from_state' => !empty($company_data['from_state']) ? $company_data['from_state'] : '', 'from_city' => !empty($company_data['from_city']) ? $company_data['from_city'] : '', 'from_zip' => !empty($company_data['from_zip']) ? $company_data['from_zip'] : '', 'from_street' => !empty($company_data['from_street']) ? $company_data['from_street'] : '', ); } return !empty($res) ? $res : array(); } function fn_sd_taxjar_order_export_generate_csv(&$data, &$options, $enclosure) { static $output_started = false; $eol = "\n"; if ($options['delimiter'] == 'C') { $delimiter = ','; } elseif ($options['delimiter'] == 'T') { $delimiter = "\t"; } else { $delimiter = ';'; } fn_mkdir($options['dir']); @chmod($options['dir'], 0777); foreach ($data as $k => $v) { foreach ($v as $name => $value) { $data[$k][$name] = $enclosure . str_replace(array("\r","\n","\t",$enclosure), array('','','',$enclosure.$enclosure), $value) . $enclosure; } if (substr($data[$k][$name], -3) == '"""') { $data[$k][$name] .= ' '; } } if ($output_started == false || isset($options['force_header'])) { Tygh::$app['view']->assign('fields', array_keys($data[0])); } else { Tygh::$app['view']->clearAssign('fields'); } Tygh::$app['view']->assign('export_data', $data); Tygh::$app['view']->assign('delimiter', $delimiter); Tygh::$app['view']->assign('eol', $eol); $csv = Tygh::$app['view']->fetch('views/exim/components/export_csv.tpl'); $fd = fopen( $options['dir'] . '/' . $options['filename'], ($output_started && !isset($options['force_header'])) ? 'ab' : 'wb' ); if ($fd) { fwrite($fd, $csv, strlen($csv)); fclose($fd); @chmod($options['dir'] . '/' . $options['filename'], 0777); } if ($output_started == false) { $output_started = true; } unset($options['force_header']); return true; } function fn_sd_taxjar_order_export_pack_results($name = '', $company_id = 0) { $dir = fn_sd_taxjar_order_get_export_dir($company_id); if (!file_exists($dir)) { fn_mkdir($dir); } if (!file_exists($dir . '/' . 'taxjar_import_part_1.csv')) { return false; } $tmp_dir = fn_sd_taxjar_order_get_export_dir($company_id, true); fn_mkdir($tmp_dir); @chmod($tmp_dir, 0777); $name = !empty($name) ? $name : 'orders_export_' . date('dMY_His', TIME) . '.zip'; try { $archiver = \Tygh\Tygh::$app['archiver']; $result = $archiver->compress( $tmp_dir . '/' . $name, array($dir) ); } catch (\Exception $e) { $result = false; fn_set_notification('E', __('error'), $e->getMessage()); } if ($result) { fn_copy($tmp_dir . '/' . $name, $dir); } fn_rm($tmp_dir); return $result; } function fn_sd_taxjar_order_get_export_dir($company_id = 0, $is_tmp = false) { return Registry::get('config.dir.root') . '/var/files/' . $company_id . ($is_tmp ? '/tmp_taxjar_exim' : '/taxjar_exim'); } 